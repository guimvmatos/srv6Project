digraph SimpleSumeSwitch {
rankdir = LR;
_IN_[label = "IN", shape=box, color = gray24,  fontname="times:italic"  ];
_OUT_[label = "OUT", shape=box, color = gray24,  fontname="times:italic"  ];
MyParser[style = filled, fillcolor = papayawhip ];
MyIngress_lvl[style = filled, fillcolor = darkseagreen ];
mac_exact[style = filled, fillcolor = gold ];
MyIngress_lvl_0[style = filled, fillcolor = darkseagreen ];
MyDeparser[style = filled, fillcolor = orange2 ];
S_BRIDGER_for_mac_exact_tuple_in_request[label = "bridge", style = filled, fillcolor=gray75 ];
S_PROTOCOL_ADAPTER_INGRESS[label = "adapter", style = filled, fillcolor=gray75 ];
S_PROTOCOL_ADAPTER_EGRESS[label = "adapter", style = filled, fillcolor=gray75 ];
S_SYNCER_for_MyParser[label = "sync", style = filled, fillcolor=gray75 ];
S_SYNCER_for_S_SYNCER_for_S_SYNCER_for_MyDeparser[label = "sync", style = filled, fillcolor=gray75 ];
S_SYNCER_for_S_SYNCER_for_MyDeparser[label = "sync", style = filled, fillcolor=gray75 ];
S_SYNCER_for_MyDeparser[label = "sync", style = filled, fillcolor=gray75 ];
S_SYNCER_for__OUT_[label = "sync", style = filled, fillcolor=gray75 ];
MyIngress_lvl -> S_BRIDGER_for_mac_exact_tuple_in_request [color=green2] ;
S_BRIDGER_for_mac_exact_tuple_in_request -> mac_exact [color=green2] ;
_IN_ -> S_PROTOCOL_ADAPTER_INGRESS [color=blue, style = bold] ;
MyDeparser -> S_PROTOCOL_ADAPTER_EGRESS [color=green2] ;
MyDeparser -> S_PROTOCOL_ADAPTER_EGRESS [color=blue, style = bold] ;
_IN_ -> S_SYNCER_for_MyParser [color=green2] ;
S_SYNCER_for_MyParser -> MyParser [color=green2] ;
S_PROTOCOL_ADAPTER_INGRESS -> S_SYNCER_for_MyParser [color=green2] ;
S_SYNCER_for_MyParser -> MyParser [color=green2] ;
S_PROTOCOL_ADAPTER_INGRESS -> S_SYNCER_for_MyParser [color=blue, style = bold] ;
S_SYNCER_for_MyParser -> MyParser [color=blue, style = bold] ;
MyParser -> S_SYNCER_for_S_SYNCER_for_S_SYNCER_for_MyDeparser [color=green2] ;
S_SYNCER_for_S_SYNCER_for_S_SYNCER_for_MyDeparser -> MyIngress_lvl [color=green2] ;
MyParser -> S_SYNCER_for_S_SYNCER_for_S_SYNCER_for_MyDeparser [color=green2] ;
S_SYNCER_for_S_SYNCER_for_S_SYNCER_for_MyDeparser -> MyIngress_lvl [color=green2] ;
MyParser -> S_SYNCER_for_S_SYNCER_for_S_SYNCER_for_MyDeparser [color=green2] ;
S_SYNCER_for_S_SYNCER_for_S_SYNCER_for_MyDeparser -> MyIngress_lvl [color=green2] ;
MyParser -> S_SYNCER_for_S_SYNCER_for_S_SYNCER_for_MyDeparser [color=green2] ;
S_SYNCER_for_S_SYNCER_for_S_SYNCER_for_MyDeparser -> MyIngress_lvl [color=green2] ;
MyParser -> S_SYNCER_for_S_SYNCER_for_S_SYNCER_for_MyDeparser [color=green2] ;
MyParser -> S_SYNCER_for_S_SYNCER_for_S_SYNCER_for_MyDeparser [color=blue, style = bold] ;
MyParser -> S_SYNCER_for_S_SYNCER_for_S_SYNCER_for_MyDeparser [color=green2] ;
MyIngress_lvl -> S_SYNCER_for_S_SYNCER_for_MyDeparser [color=green2] ;
S_SYNCER_for_S_SYNCER_for_MyDeparser -> MyIngress_lvl_0 [color=green2] ;
MyIngress_lvl -> S_SYNCER_for_S_SYNCER_for_MyDeparser [color=green2] ;
S_SYNCER_for_S_SYNCER_for_MyDeparser -> MyIngress_lvl_0 [color=green2] ;
MyIngress_lvl -> S_SYNCER_for_S_SYNCER_for_MyDeparser [color=green2] ;
S_SYNCER_for_S_SYNCER_for_MyDeparser -> MyIngress_lvl_0 [color=green2] ;
MyIngress_lvl -> S_SYNCER_for_S_SYNCER_for_MyDeparser [color=green2] ;
S_SYNCER_for_S_SYNCER_for_MyDeparser -> MyIngress_lvl_0 [color=green2] ;
MyIngress_lvl -> S_SYNCER_for_S_SYNCER_for_MyDeparser [color=green2] ;
S_SYNCER_for_S_SYNCER_for_MyDeparser -> MyIngress_lvl_0 [color=green2] ;
mac_exact -> S_SYNCER_for_S_SYNCER_for_MyDeparser [color=green2] ;
S_SYNCER_for_S_SYNCER_for_MyDeparser -> MyIngress_lvl_0 [color=green2] ;
S_SYNCER_for_S_SYNCER_for_S_SYNCER_for_MyDeparser -> S_SYNCER_for_S_SYNCER_for_MyDeparser [color=green2] ;
S_SYNCER_for_S_SYNCER_for_S_SYNCER_for_MyDeparser -> S_SYNCER_for_S_SYNCER_for_MyDeparser [color=blue, style = bold] ;
S_SYNCER_for_S_SYNCER_for_S_SYNCER_for_MyDeparser -> S_SYNCER_for_S_SYNCER_for_MyDeparser [color=green2] ;
MyIngress_lvl_0 -> S_SYNCER_for_MyDeparser [color=green2] ;
S_SYNCER_for_MyDeparser -> MyDeparser [color=green2] ;
MyIngress_lvl_0 -> S_SYNCER_for_MyDeparser [color=green2] ;
S_SYNCER_for_MyDeparser -> MyDeparser [color=green2] ;
MyIngress_lvl_0 -> S_SYNCER_for_MyDeparser [color=green2] ;
S_SYNCER_for_MyDeparser -> MyDeparser [color=green2] ;
MyIngress_lvl_0 -> S_SYNCER_for_MyDeparser [color=green2] ;
S_SYNCER_for_MyDeparser -> MyDeparser [color=green2] ;
S_SYNCER_for_S_SYNCER_for_MyDeparser -> S_SYNCER_for_MyDeparser [color=green2] ;
S_SYNCER_for_MyDeparser -> MyDeparser [color=green2] ;
S_SYNCER_for_S_SYNCER_for_MyDeparser -> S_SYNCER_for_MyDeparser [color=blue, style = bold] ;
S_SYNCER_for_MyDeparser -> MyDeparser [color=blue, style = bold] ;
S_SYNCER_for_S_SYNCER_for_MyDeparser -> S_SYNCER_for_MyDeparser [color=green2] ;
S_SYNCER_for_MyDeparser -> MyDeparser [color=green2] ;
MyDeparser -> S_SYNCER_for__OUT_ [color=green2] ;
S_SYNCER_for__OUT_ -> _OUT_ [color=green2] ;
MyDeparser -> S_SYNCER_for__OUT_ [color=green2] ;
S_SYNCER_for__OUT_ -> _OUT_ [color=green2] ;
S_PROTOCOL_ADAPTER_EGRESS -> S_SYNCER_for__OUT_ [color=blue, style = bold] ;
S_SYNCER_for__OUT_ -> _OUT_ [color=blue, style = bold] ;
S_CONTROL_SimpleSumeSwitch -> mac_exact [color=gray] ;
_IN_ -> S_CONTROL_SimpleSumeSwitch [color=gray] ;
_IN_ -> S_PROTOCOL_ADAPTER_INGRESS [color=hotpink] ;
S_SYNCER_for__OUT_ -> MyDeparser [color=red] [style=dotted] [constraint=false] ;
S_SYNCER_for_MyDeparser -> S_SYNCER_for_S_SYNCER_for_MyDeparser [color=red] [style=dotted] [constraint=false] ;
S_SYNCER_for_S_SYNCER_for_MyDeparser -> S_SYNCER_for_S_SYNCER_for_S_SYNCER_for_MyDeparser [color=red] [style=dotted] [constraint=false] ;
S_SYNCER_for_S_SYNCER_for_S_SYNCER_for_MyDeparser -> S_SYNCER_for_MyParser [color=red] [style=dotted] [constraint=false] ;
S_SYNCER_for_MyParser -> _IN_ [color=red] [style=dotted] [constraint=false] ;
MyDeparser -> S_SYNCER_for_MyDeparser [color=red] [style=dotted] [constraint=false] ;
_OUT_ -> S_SYNCER_for__OUT_ [color=red] [style=dotted] [constraint=false] ;
subgraph cluster_0 { 
    node [shape=plaintext];
    
    k4 [label = "Backpressure" ];
    k1 [label = "Control" ]; 
    k5 [label = "Plain wire" ];
    k3 [label = "Tuple" ];
    k2 [label = "Packet" ];

    d1 [label = "" ];
    d2 [label = "" ];
    d3 [label = "" ];
    d4 [label = "" ];
    d5 [label = "" ];

    anchor [label = "" ];
    
    anchor -> k2 [style=invis];
    anchor -> k3 [style=invis];  
    anchor -> k1 [style=invis];
    anchor -> k5 [style=invis];  
    anchor -> k4 [style=invis];  
    
    k2 -> d2 [color=blue, style=bold];
    k3 -> d3 [color=green2];
    k1 -> d1 [color=gray];
    k5 -> d5 [color=hotpink];
    k4 -> d4 [color=red, style=dotted, dir=back];
    
    label = "Legend"; fontname="times:bold";
    color=SlateGray
}
_OUT_ -> anchor [style=invis];

}
